---
source: tests/snapshot_tests.rs
expression: output
---
// Mixed visibility service
// FR2: Comprehensive integration test combining all FR2 features

class BaseService {
    protected logger: Logger;

    constructor(config: AppConfig){
        this.logger = createLogger(config.logLevel);
    }
}
// Final integration
const serviceInstance = createDataService();
// Exported config depending on base
export interface AppConfig extends BaseConfig {
    logLevel: LogLevel;
    apiUrl: string;
}
export class DataService extends BaseService {
    async fetchData(id: string): Promise<unknown> {
        if (!internalValidate(id)) {
            throw new Error('Invalid ID');
        }
        this.logger.log(`Fetching data for ${id}`);
        return {
            id
        };
    }
}
// Exported logger with dependencies
export class Logger {
    constructor(private level: LogLevel){}

    log(message: string) {
        if (this.level === 'info') {
            internalLog(message);
        }
    }
}
export const defaultConfig: AppConfig = {
    apiUrl: 'https://api.example.com',
    debug: false,
    logLevel: 'info'
};
export function createDataService(config: AppConfig = defaultConfig): DataService {
    return new DataService(config);
}
export function createLogger(level: LogLevel = 'info'): Logger {
    return new Logger(level);
}
// Type guards and validators
export function isAppConfig(value: unknown): value is AppConfig {
    return (typeof value === 'object' && value !== null && 'debug' in value && 'logLevel' in value && 'apiUrl' in value);
}
export async function performDataOperation(id: string) {
    return serviceInstance.fetchData(id);
}
// Base types used by exports
interface BaseConfig {
    debug: boolean;
}
type LogLevel = 'error' | 'info' | 'warn';
// Internal utilities
function internalLog(message: string) {
    console.log(`[Internal] ${message}`);
}
function internalValidate(value: unknown): boolean {
    return value != null;
}
