name: Benchmark

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --bench formatting_bench --bench real_world_bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30
    
    # For pull requests, run benchmarks and comment with comparison
    - name: Run benchmarks for comparison
      if: github.event_name == 'pull_request'
      run: |
        # Save current branch results
        cargo bench --bench real_world_bench -- --save-baseline pr
        
        # Checkout base branch
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
        
        # Run benchmarks on base branch
        cargo bench --bench real_world_bench -- --save-baseline main
        
        # Go back to PR branch
        git checkout -
        
        # Compare results
        cargo bench --bench real_world_bench -- --baseline main
        
    - name: Comment PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read the benchmark comparison output
          const criterionDir = path.join(process.env.GITHUB_WORKSPACE, 'target/criterion');
          let comment = '## Benchmark Results\n\n';
          
          try {
            // This is a simplified version - you'd need to parse criterion output
            comment += 'Benchmarks completed. Check the artifacts for detailed results.\n';
          } catch (error) {
            comment += 'Error reading benchmark results.\n';
          }
          
          // Find existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## Benchmark Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }
